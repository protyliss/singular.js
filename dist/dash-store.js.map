{"version":3,"sources":["dash-store.js"],"names":["dash","FROM_CHAR_CODE","String","JSON","fromCharCode","reverse","value","result","codes","Uint16Array","current","length","getKey","btoa","sessionStorage","setItem","get","getItem","name","PARSE","Uint8Array","bytes","charCodeAt","buffer","end","fromBinary","atob","set","parse","STRINGIFY","stringify","units","toBinary","pop","removeItem","clear","window"],"mappings":"cACA,SAAWA,GAAV,IAAgBC,EAAAC,OAANF,aACeC,EAAtBE,KAAsBF,MAAdG,EAARD,KAAyCD,UAgCzC,SAASG,EAAQC,GAPTC,IAFEC,IAAAA,EAAYC,GACTC,EAASC,EAAlBA,OACA,EAAUD,KACHH,GAAPD,EAAAI,GACA,OAASA,EAER,SAAAE,EAAAN,GAYD,OAAOO,KAAKR,EAAQQ,KAAKP,KAGzBQ,EAAAA,QAAeC,CACfC,IAXA,SAAoBL,GACpB,OAaML,EAAQQ,eAAeG,QAAQL,EAAOM,MAZlCC,EAnBd,SAAoBb,GAHf,IAFD,IAASI,EAAF,IAAPU,WAAwBd,EAAAK,QACdD,EAAIT,EAAAA,OACb,EAAAS,KAOGW,EAAMX,GAAWJ,EAAMgB,WAAWZ,GAFlCA,IAHP,IAAAF,EAAA,IAAAC,YAAAY,EAAAE,QAQSC,EAAMhB,EAAMG,OAPbc,EAAT,GACUJ,GAAQ,IACHX,EAASC,GAShBJ,GAAUN,EAAeO,EAAME,IAP/BW,OAAMX,EAeIJ,CAAKoB,KAAfrB,EAAAqB,KAAApB,QAUPqB,IAfA,SAAAT,EAAAZ,GACD,OAYIQ,eAAeC,QAAQH,EAAOM,GAAOL,KAAKR,EAAQQ,KA3CtD,SAAQe,GACR,IADiCC,IAAAA,EAAjC,IAAsBC,YAAtBxB,EAAAK,QAGQD,EAAUqB,EAAMpB,OAFC,EAAhBqB,KACCD,EAAQrB,GAAID,EAAYH,WAA9BI,GASA,IAJA,IAAMF,EAAQ,IAAIY,WAAWW,EAAMR,QAH5Bb,EAAOF,EAAQG,OACZD,EAAN,GACHA,GAAA,IAKQA,EAAUc,GAJbhB,GAAYY,EAAiBG,EAArBb,IAEVH,OAAMA,EAkC6CyB,CAASH,EAAUvB,QAZrED,GAgCL4B,IA1BA,SAAAf,GAiBA,OAhBHJ,eAAAoB,WAAAtB,EAAAM,IAgBUlB,GARXmC,MANI,WAkBA,OAjBHrB,eAAAqB,QAiBUnC,IA5Df,CAkDQoC,OAAA","file":"dash-store.js","sourcesContent":["\"use strict\";\n(function (dash) {\n    const { fromCharCode: FROM_CHAR_CODE } = String;\n    const { parse: PARSE, stringify: STRINGIFY } = JSON;\n    function toBinary(value) {\n        const units = new Uint16Array(value.length);\n        let current = units.length;\n        while (current-- > 0) {\n            units[current] = value.charCodeAt(current);\n        }\n        const codes = new Uint8Array(units.buffer);\n        const end = codes.length;\n        let result = '';\n        current = -1;\n        while (++current < end) {\n            result += FROM_CHAR_CODE(codes[current]);\n        }\n        return result;\n    }\n    function fromBinary(value) {\n        const bytes = new Uint8Array(value.length);\n        let current = bytes.length;\n        while (current-- > 0) {\n            bytes[current] = value.charCodeAt(current);\n        }\n        const codes = new Uint16Array(bytes.buffer);\n        const end = codes.length;\n        let result = '';\n        current = -1;\n        while (++current < end) {\n            result += FROM_CHAR_CODE(codes[current]);\n        }\n        return result;\n    }\n    function reverse(value) {\n        let result = '';\n        let current = value.length;\n        while (current-- > 0) {\n            result += value[current];\n        }\n        return result;\n    }\n    function getKey(value) {\n        return btoa(reverse(btoa(value)));\n    }\n    function setSession(name, value) {\n        sessionStorage.setItem(getKey(name), btoa(reverse(btoa(toBinary(STRINGIFY(value))))));\n        return dash;\n    }\n    function getSession(name) {\n        const value = sessionStorage.getItem(getKey(name));\n        return value ?\n            PARSE(fromBinary(atob(reverse(atob(value))))) :\n            value;\n    }\n    function popSession(name) {\n        sessionStorage.removeItem(getKey(name));\n        return dash;\n    }\n    function clearSession() {\n        sessionStorage.clear();\n        return dash;\n    }\n    dash.session = {\n        get: getSession,\n        set: setSession,\n        pop: popSession,\n        clear: clearSession\n    };\n})(window['dash']);\n"]}