{"version":3,"sources":["dash-store.js"],"names":["dash","FROM_CHAR_CODE","String","JSON","fromCharCode","reverse","value","result","codes","Uint16Array","current","length","getKey","btoa","session","sessionStorage","getItem","name","PARSE","Uint8Array","bytes","charCodeAt","buffer","end","fromBinary","atob","set","setItem","parse","STRINGIFY","stringify","units","toBinary","clear","window"],"mappings":"cACA,SAAWA,GAAV,IAAgBC,EAAAC,OAANF,aACeC,EAAtBE,KAAsBF,MAAdG,EAARD,KAAyCD,UAgCzC,SAASG,EAAQC,GAPTC,IAFEC,IAAAA,EAAYC,GACTC,EAASC,EAAlBA,OACA,EAAUD,KACHH,GAAPD,EAAAI,GACA,OAASA,EAER,SAAAE,EAAAN,GAYD,OAAOO,KAAKR,EAAQQ,KAAKP,KAAzBN,EAAAc,QAAYT,CAAAA,IAPZ,SAAoBM,GACpB,OAaML,EAAQS,eAAeC,QAAQJ,EAAOK,MAZlCC,EAnBd,SAAoBZ,GAHf,IAFD,IAASI,EAAF,IAAPS,WAAwBb,EAAAK,QACdD,EAAIT,EAAAA,OACb,EAAAS,KAOGU,EAAMV,GAAWJ,EAAMe,WAAWX,GAFlCA,IAHP,IAAAF,EAAA,IAAAC,YAAAW,EAAAE,QAQSC,EAAMf,EAAMG,OAPba,EAAT,GACUJ,GAAQ,IACHV,EAASC,GAShBJ,GAAUN,EAAeO,EAAME,IAP/BU,OAAMV,EAeIJ,CAAKmB,KAAfpB,EAAAoB,KAAAnB,QAKJoB,IAVH,SAAAT,EAAAX,GACD,OAYIS,eAAeY,QAAQf,EAAOK,GAAOJ,KAAKR,EAAQQ,KA3CtD,SAAQe,GACR,IADiCC,IAAAA,EAAjC,IAAsBC,YAAtBxB,EAAAK,QAGQD,EAAUqB,EAAMpB,OAFC,EAAhBqB,KACCD,EAAQrB,GAAID,EAAYH,WAA9BI,GASA,IAJA,IAAMF,EAAQ,IAAIW,WAAWY,EAAMT,QAH5BZ,EAAOF,EAAQG,OACZD,EAAN,GACHA,GAAA,IAKQA,EAAUa,GAJbf,GAAYW,EAAiBG,EAArBZ,IAEVH,OAAMA,EAkC6CyB,CAASH,EAAUvB,QAZrED,GASL4B,MAHA,WAiBA,OAhBHlB,eAAAkB,QAgBUjC,IAxDf,CA2CKkC,OAAA","file":"dash-store.js","sourcesContent":["\"use strict\";\n(function (dash) {\n    const { fromCharCode: FROM_CHAR_CODE } = String;\n    const { parse: PARSE, stringify: STRINGIFY } = JSON;\n    function toBinary(value) {\n        const units = new Uint16Array(value.length);\n        let current = units.length;\n        while (current-- > 0) {\n            units[current] = value.charCodeAt(current);\n        }\n        const codes = new Uint8Array(units.buffer);\n        const end = codes.length;\n        let result = '';\n        current = -1;\n        while (++current < end) {\n            result += FROM_CHAR_CODE(codes[current]);\n        }\n        return result;\n    }\n    function fromBinary(value) {\n        const bytes = new Uint8Array(value.length);\n        let current = bytes.length;\n        while (current-- > 0) {\n            bytes[current] = value.charCodeAt(current);\n        }\n        const codes = new Uint16Array(bytes.buffer);\n        const end = codes.length;\n        let result = '';\n        current = -1;\n        while (++current < end) {\n            result += FROM_CHAR_CODE(codes[current]);\n        }\n        return result;\n    }\n    function reverse(value) {\n        let result = '';\n        let current = value.length;\n        while (current-- > 0) {\n            result += value[current];\n        }\n        return result;\n    }\n    function getKey(value) {\n        return btoa(reverse(btoa(value)));\n    }\n    function setSession(name, value) {\n        sessionStorage.setItem(getKey(name), btoa(reverse(btoa(toBinary(STRINGIFY(value))))));\n        return dash;\n    }\n    function getSession(name) {\n        const value = sessionStorage.getItem(getKey(name));\n        return value ?\n            PARSE(fromBinary(atob(reverse(atob(value))))) :\n            value;\n    }\n    function clearSession() {\n        sessionStorage.clear();\n        return dash;\n    }\n    dash.session = { get: getSession, set: setSession, clear: clearSession };\n})(window['dash']);\n"]}