{"version":3,"sources":["singular-store.js"],"names":["singular","String","FROM_CHAR_CODE","parse","JSON","STRINGIFY","stringify","reverse","Uint16Array","current","end","result","length","value","getKey","btoa","get","name","sessionStorage","getItem","PARSE","bytes","charCodeAt","codes","buffer","fromBinary","Uint8Array","atob","set","units","toBinary","pop","removeItem","clear","setSession","window"],"mappings":"cAEA,SAAWA,GACP,IAAyCC,EAAzCA,OAAsBC,aACdC,EAARC,KAAAD,MAAAE,EAAAD,KAAAE,UAsBI,SAAWC,EAAOC,GAGlBC,IAFMC,IAAGC,EAASC,GACdD,EAAJE,EAAAD,OACA,EAAWH,KAUPE,GAAUE,EAAMJ,GARhBE,OAAMA,EAYd,SAASG,EAAOD,GAVZ,OAAOF,KAAPJ,EAAAQ,KAAAF,KAeAb,EAAOA,QAAP,CACHgB,IACD,SAAoBC,GAXZN,OADGF,EAAOS,eAAQC,QAAAL,EAAAG,MAErBG,EAzBD,SAAmBV,GAQnB,IAPIC,IAAMU,EAAInB,IAAAA,WAAqBO,EAAAA,QAClCA,EAAAY,EAAAT,OAMkB,EAAZH,KALAE,EAAPF,GAAAI,EAAAS,WAAAb,GAYA,IAJA,IAAMc,EAAQ,IAAIf,YAAYa,EAAMG,QAN/BC,EAAAA,EAAWZ,OACVQ,EAAYK,GACdjB,GAAUY,IAQLZ,EAAUC,GAPZD,GAAOP,EAAQqB,EAAAd,IAErB,OAAAE,EAeAc,CAAAE,KAAApB,EAAAoB,KAAAd,QA0BDe,IApBJ,SAAoBX,EAAMJ,GAVlBF,OADRO,eAAiBL,QAAOC,EAAAG,GAAAF,KAAAR,EAAAQ,KA/BxB,SAAAF,GAEUgB,IAAN,IAAMA,EAAQ,IAAIrB,YAAYK,EAAMD,QAD/BkB,EAASjB,EAAOD,OACHJ,EAAPC,KACPA,EAAUoB,GAAMjB,EAApBU,WAAAb,GAIMc,IAHN,IAAOd,EAAO,IAAQiB,WAAAG,EAAAL,QACZf,EAANc,EAAiBV,OACpBF,EAAA,GAIDF,GAAW,IAHGA,EAAIiB,GACTf,GAASC,EAAlBW,EAAAd,IAEAA,OAAWE,EAqBSmB,CAAAzB,EAAAQ,QACVb,GAcd+B,IARC,SAAAd,GACD,OAcIC,eAAec,WAAWlB,EAAOG,IAd5BH,GAQCD,MANT,WACD,OAeIK,eAAee,QAfVC,IA5Cb,CAqDKC,OAAA","file":"singular-store.js","sourcesContent":["\"use strict\";\n/// <reference path=\"singular.ts\" />\n(function (singular) {\n    const { fromCharCode: FROM_CHAR_CODE } = String;\n    const { parse: PARSE, stringify: STRINGIFY } = JSON;\n    function toBinary(value) {\n        const units = new Uint16Array(value.length);\n        let current = units.length;\n        while (current-- > 0) {\n            units[current] = value.charCodeAt(current);\n        }\n        const codes = new Uint8Array(units.buffer);\n        const end = codes.length;\n        let result = '';\n        current = -1;\n        while (++current < end) {\n            result += FROM_CHAR_CODE(codes[current]);\n        }\n        return result;\n    }\n    function fromBinary(value) {\n        const bytes = new Uint8Array(value.length);\n        let current = bytes.length;\n        while (current-- > 0) {\n            bytes[current] = value.charCodeAt(current);\n        }\n        const codes = new Uint16Array(bytes.buffer);\n        const end = codes.length;\n        let result = '';\n        current = -1;\n        while (++current < end) {\n            result += FROM_CHAR_CODE(codes[current]);\n        }\n        return result;\n    }\n    function reverse(value) {\n        let result = '';\n        let current = value.length;\n        while (current-- > 0) {\n            result += value[current];\n        }\n        return result;\n    }\n    function getKey(value) {\n        return btoa(reverse(btoa(value)));\n    }\n    function setSession(name, value) {\n        sessionStorage.setItem(getKey(name), btoa(reverse(btoa(toBinary(STRINGIFY(value))))));\n        return singular;\n    }\n    function getSession(name) {\n        const value = sessionStorage.getItem(getKey(name));\n        return value ?\n            PARSE(fromBinary(atob(reverse(atob(value))))) :\n            value;\n    }\n    function popSession(name) {\n        sessionStorage.removeItem(getKey(name));\n        return singular;\n    }\n    function clearSession() {\n        sessionStorage.clear();\n        return singular;\n    }\n    singular.session = {\n        get: getSession,\n        set: setSession,\n        pop: popSession,\n        clear: clearSession\n    };\n})(window['singular']);\n"]}